
Intrusion_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003db0  08003db0  00004db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db8  08003db8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003dc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000208  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3ba  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d3b  00000000  00000000  0000f446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  00011188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068e  00000000  00000000  00011a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220ad  00000000  00000000  000120ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae95  00000000  00000000  0003417b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf843  00000000  00000000  0003f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e853  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026b4  00000000  00000000  0010e898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00110f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cac 	.word	0x08003cac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003cac 	.word	0x08003cac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <I2CInit>:
 *      Author: admin
 */

#include "i2c.h"

void I2CInit(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <I2CInit+0xac>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b4:	4a28      	ldr	r2, [pc, #160]	@ (8000658 <I2CInit+0xac>)
 80005b6:	f043 0302 	orr.w	r3, r3, #2
 80005ba:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <I2CInit+0xb0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a26      	ldr	r2, [pc, #152]	@ (800065c <I2CInit+0xb0>)
 80005c2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80005c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <I2CInit+0xb0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <I2CInit+0xb0>)
 80005ce:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80005d2:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <I2CInit+0xb0>)
 80005d6:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 80005da:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <I2CInit+0xb0>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a1e      	ldr	r2, [pc, #120]	@ (800065c <I2CInit+0xb0>)
 80005e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005e6:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <I2CInit+0xb0>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <I2CInit+0xb0>)
 80005ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80005f2:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <I2CInit+0xac>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <I2CInit+0xac>)
 80005fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <I2CInit+0xb4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a16      	ldr	r2, [pc, #88]	@ (8000660 <I2CInit+0xb4>)
 8000606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800060a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <I2CInit+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <I2CInit+0xb4>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <I2CInit+0xb4>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <I2CInit+0xb4>)
 8000620:	2250      	movs	r2, #80	@ 0x50
 8000622:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 8000624:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <I2CInit+0xb4>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <I2CInit+0xb4>)
 800062a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800062e:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <I2CInit+0xb4>)
 8000632:	2211      	movs	r2, #17
 8000634:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <I2CInit+0xb4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <I2CInit+0xb4>)
 800063c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000640:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <I2CInit+0xb4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a06      	ldr	r2, [pc, #24]	@ (8000660 <I2CInit+0xb4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400
 8000660:	40005400 	.word	0x40005400

08000664 <I2CStart>:

void I2CStart(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	// send start bit
	I2C1->CR1 |= I2C_CR1_START;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <I2CStart+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <I2CStart+0x2c>)
 800066e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000672:	6013      	str	r3, [r2, #0]
	// wait for start bit sent on bus
	while(!(I2C1->SR1 & I2C_SR1_SB));	// while((I2C1->SR1 & I2C_SR1_SB) == 0);
 8000674:	bf00      	nop
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <I2CStart+0x2c>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <I2CStart+0x12>
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40005400 	.word	0x40005400

08000694 <I2CStop>:

void I2CRepeatStart(void) {
	I2CStart();
}

void I2CStop(void) {
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	// send stop bit
	I2C1->CR1 |= I2C_CR1_STOP;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <I2CStop+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <I2CStop+0x2c>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a2:	6013      	str	r3, [r2, #0]
	// wait for stop bit sent on bus
	while(I2C1->SR2 & I2C_SR2_BUSY);		// while((I2C1->SR2 & I2C_SR2_BUSY) != 0);
 80006a4:	bf00      	nop
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <I2CStop+0x2c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f9      	bne.n	80006a6 <I2CStop+0x12>
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40005400 	.word	0x40005400

080006c4 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	// write slave addr in DR
	I2C1->DR = addr;
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <I2CSendSlaveAddr+0x34>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	6113      	str	r3, [r2, #16]
	// wait until slave addr is sent
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80006d4:	bf00      	nop
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <I2CSendSlaveAddr+0x34>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f9      	beq.n	80006d6 <I2CSendSlaveAddr+0x12>
	// read status regrs to clear acks
	(void)I2C1->SR1;
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <I2CSendSlaveAddr+0x34>)
 80006e4:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <I2CSendSlaveAddr+0x34>)
 80006e8:	699b      	ldr	r3, [r3, #24]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40005400 	.word	0x40005400

080006fc <I2CSendData>:

void I2CSendData(uint8_t data) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	// wait until data is sent
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000706:	bf00      	nop
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <I2CSendData+0x3c>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <I2CSendData+0xc>
	// write data in DR
	I2C1->DR = data;
 8000714:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <I2CSendData+0x3c>)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	6113      	str	r3, [r2, #16]
	// poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800071a:	bf00      	nop
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <I2CSendData+0x3c>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f9      	beq.n	800071c <I2CSendData+0x20>
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400

0800073c <I2CWrite>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

void I2CWrite(uint8_t addr, uint8_t data) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 800074c:	f7ff ff8a 	bl	8000664 <I2CStart>
	I2CSendSlaveAddr(addr);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffb6 	bl	80006c4 <I2CSendSlaveAddr>
	I2CSendData(data);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffce 	bl	80006fc <I2CSendData>
	I2CStop();
 8000760:	f7ff ff98 	bl	8000694 <I2CStop>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <LcdInit>:
 *      Author: admin
 */

#include "lcd.h"

void LcdInit(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// i2c initialization
	I2CInit();
 8000770:	f7ff ff1c 	bl	80005ac <I2CInit>
	// lcd initialization
	DelayMs(20);
 8000774:	2014      	movs	r0, #20
 8000776:	f000 feaf 	bl	80014d8 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 800077a:	2103      	movs	r1, #3
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f82e 	bl	80007de <LcdWriteNibble>
	DelayMs(5);
 8000782:	2005      	movs	r0, #5
 8000784:	f000 fea8 	bl	80014d8 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000788:	2103      	movs	r1, #3
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f827 	bl	80007de <LcdWriteNibble>
	DelayMs(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fea1 	bl	80014d8 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000796:	2103      	movs	r1, #3
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f820 	bl	80007de <LcdWriteNibble>
	DelayMs(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fe9a 	bl	80014d8 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 80007a4:	2102      	movs	r1, #2
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f819 	bl	80007de <LcdWriteNibble>
	DelayMs(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 fe93 	bl	80014d8 <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 80007b2:	2128      	movs	r1, #40	@ 0x28
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 f84a 	bl	800084e <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 80007ba:	2108      	movs	r1, #8
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f846 	bl	800084e <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 f842 	bl	800084e <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 80007ca:	2106      	movs	r1, #6
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 f83e 	bl	800084e <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 80007d2:	210c      	movs	r1, #12
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f83a 	bl	800084e <LcdWriteByte>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	460a      	mov	r2, r1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 80007fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	b25a      	sxtb	r2, r3
 8000804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f043 030c 	orr.w	r3, r3, #12
 8000810:	b25b      	sxtb	r3, r3
 8000812:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	4619      	mov	r1, r3
 8000818:	204e      	movs	r0, #78	@ 0x4e
 800081a:	f7ff ff8f 	bl	800073c <I2CWrite>
	DelayMs(1);
 800081e:	2001      	movs	r0, #1
 8000820:	f000 fe5a 	bl	80014d8 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 8000824:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	b25a      	sxtb	r2, r3
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	b25b      	sxtb	r3, r3
 800083a:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	4619      	mov	r1, r3
 8000840:	204e      	movs	r0, #78	@ 0x4e
 8000842:	f7ff ff7b 	bl	800073c <I2CWrite>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	460a      	mov	r2, r1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	4613      	mov	r3, r2
 800085c:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 800086c:	7bfa      	ldrb	r2, [r7, #15]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffb3 	bl	80007de <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 8000878:	7bba      	ldrb	r2, [r7, #14]
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffad 	bl	80007de <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	DelayMs(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fe27 	bl	80014d8 <HAL_Delay>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	6039      	str	r1, [r7, #0]
 800089c:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4619      	mov	r1, r3
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ffd3 	bl	800084e <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e00a      	b.n	80008c4 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ffc8 	bl	800084e <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ee      	bne.n	80008ae <LcdPuts+0x1c>
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	@ (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <InitLed>:
#include "led.h"
#include "main.h"

volatile int flag =0;

void InitLed(uint32_t pin){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= RCC_AHB1RSTR_GPIODRST;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <InitLed+0x38>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <InitLed+0x38>)
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER |= 1<<(pin*2);
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <InitLed+0x3c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <InitLed+0x3c>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6013      	str	r3, [r2, #0]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020c00 	.word	0x40020c00

08000958 <OnLed>:

void OnLed(uint32_t pin){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	GPIOD->BSRR |= 1<<pin;
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <OnLed+0x28>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	2101      	movs	r1, #1
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <OnLed+0x28>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6193      	str	r3, [r2, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40020c00 	.word	0x40020c00

08000984 <OffLed>:

void OffLed(uint32_t pin){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	GPIOD->BSRR |= 1<<(pin*2);
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <OffLed+0x2c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	0052      	lsls	r2, r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <OffLed+0x2c>)
 800099e:	430b      	orrs	r3, r1
 80009a0:	6193      	str	r3, [r2, #24]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <ToggleLed>:

void ToggleLed(uint32_t pin){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	GPIOD->ODR ^= 1<<pin;
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <ToggleLed+0x28>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	2101      	movs	r1, #1
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	4611      	mov	r1, r2
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <ToggleLed+0x28>)
 80009cc:	404b      	eors	r3, r1
 80009ce:	6153      	str	r3, [r2, #20]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <extint_init>:
	DelayMs(ms);
}


void extint_init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	// 1. Enable clock for GPIOA
	RCC->AHB1ENR |= BV(GPIOA_CLK_EN);
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <extint_init+0x64>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <extint_init+0x64>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. configure switch pin as input
	SWITCH_GPIO->MODER &= ~(BV(0) | BV(1)); // input mode
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <extint_init+0x68>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <extint_init+0x68>)
 80009f6:	f023 0303 	bic.w	r3, r3, #3
 80009fa:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->PUPDR &= ~(BV(0) | BV(1)); // no pull-up and no pull-down resistor
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <extint_init+0x68>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <extint_init+0x68>)
 8000a02:	f023 0303 	bic.w	r3, r3, #3
 8000a06:	60d3      	str	r3, [r2, #12]

	// 3. configure external interrupt in system(stm32f407g)
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <extint_init+0x6c>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <extint_init+0x6c>)
 8000a0e:	f023 030f 	bic.w	r3, r3, #15
 8000a12:	6093      	str	r3, [r2, #8]

	// 4. configure external interrupt in external interrupt controller
	EXTI->IMR |= BV(0);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <extint_init+0x70>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <extint_init+0x70>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= BV(0); // rising edge intr
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <extint_init+0x70>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <extint_init+0x70>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= BV(0); // falling edge intr (switch release intr is more reliable for push button switches)
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <extint_init+0x70>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <extint_init+0x70>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	60d3      	str	r3, [r2, #12]

	// 5. configure external interrupt in NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000a38:	2006      	movs	r0, #6
 8000a3a:	f7ff ff4f 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40013c00 	.word	0x40013c00

08000a54 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	// clear the interrupt
	EXTI->PR |= BV(0);
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <EXTI0_IRQHandler+0x20>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <EXTI0_IRQHandler+0x20>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6153      	str	r3, [r2, #20]
	// take action on interrupt
	flag = 1; // update the flag in RAM
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <EXTI0_IRQHandler+0x24>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
						// led_on(LED_RED);
						// DelayMs(1000);
						// led_off(LED_RED);
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40013c00 	.word	0x40013c00
 8000a78:	20000078 	.word	0x20000078

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b08f      	sub	sp, #60	@ 0x3c
 8000a80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fcb7 	bl	80013f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  extint_init();
 8000a86:	f7ff ffab 	bl	80009e0 <extint_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f8db 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f9bf 	bl	8000e10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a92:	f000 f941 	bl	8000d18 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000a96:	f000 f991 	bl	8000dbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	RtcDate_t dt = { .date = 31, .month = 12, .year = 24, .weekday = 2 };
 8000a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8000c18 <main+0x19c>)
 8000a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa4:	e883 0003 	stmia.w	r3, {r0, r1}
  RtcTime_t tm = { .hr = 23, .min = 59, .sec = 55 };
 8000aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8000c1c <main+0x1a0>)
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab2:	6018      	str	r0, [r3, #0]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	8019      	strh	r1, [r3, #0]
  RtcInit(&dt, &tm);
 8000ab8:	f107 0220 	add.w	r2, r7, #32
 8000abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fa06 	bl	8000ed4 <RtcInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RtcGetTime(&tm);
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fac3 	bl	8001058 <RtcGetTime>
	  char str[32];

	  HAL_ADC_Start(&hadc1);
 8000ad2:	4853      	ldr	r0, [pc, #332]	@ (8000c20 <main+0x1a4>)
 8000ad4:	f000 fd68 	bl	80015a8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000adc:	4850      	ldr	r0, [pc, #320]	@ (8000c20 <main+0x1a4>)
 8000ade:	f000 fe68 	bl	80017b2 <HAL_ADC_PollForConversion>
	  val= HAL_ADC_GetValue(&hadc1);
 8000ae2:	484f      	ldr	r0, [pc, #316]	@ (8000c20 <main+0x1a4>)
 8000ae4:	f000 fef0 	bl	80018c8 <HAL_ADC_GetValue>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b4d      	ldr	r3, [pc, #308]	@ (8000c24 <main+0x1a8>)
 8000aee:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000af0:	484b      	ldr	r0, [pc, #300]	@ (8000c20 <main+0x1a4>)
 8000af2:	f000 fe2b 	bl	800174c <HAL_ADC_Stop>
	  LcdInit();
 8000af6:	f7ff fe39 	bl	800076c <LcdInit>
	  InitLed(BLUE);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f7ff ff0c 	bl	8000918 <InitLed>
	  if(val>=3500)
 8000b00:	4b48      	ldr	r3, [pc, #288]	@ (8000c24 <main+0x1a8>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d95a      	bls.n	8000bc4 <main+0x148>
	  {
		  if (flag==1){
 8000b0e:	4b46      	ldr	r3, [pc, #280]	@ (8000c28 <main+0x1ac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d130      	bne.n	8000b78 <main+0xfc>
			  flag=0;
 8000b16:	4b44      	ldr	r3, [pc, #272]	@ (8000c28 <main+0x1ac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
			  OnLed(BLUE);
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f7ff ff1b 	bl	8000958 <OnLed>
			  	sprintf(str,"LDR VALUE = %d %02d:%02d:%02d\r\n",val,tm.hr,tm.min,tm.sec);
 8000b22:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <main+0x1a8>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	8c3b      	ldrh	r3, [r7, #32]
 8000b2c:	461c      	mov	r4, r3
 8000b2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b32:	4638      	mov	r0, r7
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4623      	mov	r3, r4
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	493b      	ldr	r1, [pc, #236]	@ (8000c2c <main+0x1b0>)
 8000b3e:	f002 fc15 	bl	800336c <siprintf>
			  		  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000b42:	463b      	mov	r3, r7
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb43 	bl	80001d0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4639      	mov	r1, r7
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b54:	4836      	ldr	r0, [pc, #216]	@ (8000c30 <main+0x1b4>)
 8000b56:	f002 f84d 	bl	8002bf4 <HAL_UART_Transmit>
			  		  LcdPuts(LCD_LINE1, "SYSTEM NORMAL");
 8000b5a:	4936      	ldr	r1, [pc, #216]	@ (8000c34 <main+0x1b8>)
 8000b5c:	2080      	movs	r0, #128	@ 0x80
 8000b5e:	f7ff fe98 	bl	8000892 <LcdPuts>
			  		  LcdPuts(LCD_LINE2, "HELO DARKNESS");
 8000b62:	4935      	ldr	r1, [pc, #212]	@ (8000c38 <main+0x1bc>)
 8000b64:	20c0      	movs	r0, #192	@ 0xc0
 8000b66:	f7ff fe94 	bl	8000892 <LcdPuts>
			  		HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b6e:	f000 fcb3 	bl	80014d8 <HAL_Delay>
			  		ToggleLed(BLUE);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f7ff ff1e 	bl	80009b4 <ToggleLed>
		  }

		  sprintf(str,"LDR VALUE = %d \e[1;31mWARNING\e[0m %02d:%02d:%02d\r\n",val,tm.hr,tm.min,tm.sec);
 8000b78:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <main+0x1a8>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	8c3b      	ldrh	r3, [r7, #32]
 8000b82:	461c      	mov	r4, r3
 8000b84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b88:	4638      	mov	r0, r7
 8000b8a:	9201      	str	r2, [sp, #4]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4623      	mov	r3, r4
 8000b90:	460a      	mov	r2, r1
 8000b92:	492a      	ldr	r1, [pc, #168]	@ (8000c3c <main+0x1c0>)
 8000b94:	f002 fbea 	bl	800336c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fb18 	bl	80001d0 <strlen>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000baa:	4821      	ldr	r0, [pc, #132]	@ (8000c30 <main+0x1b4>)
 8000bac:	f002 f822 	bl	8002bf4 <HAL_UART_Transmit>
	  LcdPuts(LCD_LINE1, "ALERT:Intrusion Detected!");
 8000bb0:	4923      	ldr	r1, [pc, #140]	@ (8000c40 <main+0x1c4>)
 8000bb2:	2080      	movs	r0, #128	@ 0x80
 8000bb4:	f7ff fe6d 	bl	8000892 <LcdPuts>

	  LcdPuts(LCD_LINE2, str);
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	20c0      	movs	r0, #192	@ 0xc0
 8000bbe:	f7ff fe68 	bl	8000892 <LcdPuts>
 8000bc2:	e023      	b.n	8000c0c <main+0x190>
	  }
	  else {sprintf(str,"LDR VALUE = %d %02d:%02d:%02d\r\n",val,tm.hr,tm.min,tm.sec);
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <main+0x1a8>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	8c3b      	ldrh	r3, [r7, #32]
 8000bce:	461c      	mov	r4, r3
 8000bd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000bd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000bd4:	4638      	mov	r0, r7
 8000bd6:	9201      	str	r2, [sp, #4]
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4623      	mov	r3, r4
 8000bdc:	460a      	mov	r2, r1
 8000bde:	4913      	ldr	r1, [pc, #76]	@ (8000c2c <main+0x1b0>)
 8000be0:	f002 fbc4 	bl	800336c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000be4:	463b      	mov	r3, r7
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff faf2 	bl	80001d0 <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <main+0x1b4>)
 8000bf8:	f001 fffc 	bl	8002bf4 <HAL_UART_Transmit>
	  LcdPuts(LCD_LINE1, "SYSTEM NORMAL");
 8000bfc:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <main+0x1b8>)
 8000bfe:	2080      	movs	r0, #128	@ 0x80
 8000c00:	f7ff fe47 	bl	8000892 <LcdPuts>
	  LcdPuts(LCD_LINE2, "HELO DARKNESS");
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <main+0x1bc>)
 8000c06:	20c0      	movs	r0, #192	@ 0xc0
 8000c08:	f7ff fe43 	bl	8000892 <LcdPuts>

	  }
	  HAL_Delay(1000);
 8000c0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c10:	f000 fc62 	bl	80014d8 <HAL_Delay>
  {
 8000c14:	e758      	b.n	8000ac8 <main+0x4c>
 8000c16:	bf00      	nop
 8000c18:	08003d54 	.word	0x08003d54
 8000c1c:	08003d5c 	.word	0x08003d5c
 8000c20:	2000007c 	.word	0x2000007c
 8000c24:	2000010c 	.word	0x2000010c
 8000c28:	20000078 	.word	0x20000078
 8000c2c:	08003cc4 	.word	0x08003cc4
 8000c30:	200000c4 	.word	0x200000c4
 8000c34:	08003ce4 	.word	0x08003ce4
 8000c38:	08003cf4 	.word	0x08003cf4
 8000c3c:	08003d04 	.word	0x08003d04
 8000c40:	08003d38 	.word	0x08003d38

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	@ 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fbac 	bl	80033b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cb8:	2332      	movs	r3, #50	@ 0x32
 8000cba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 faab 	bl	8002224 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd4:	f000 f8b6 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fd0c 	bl	8002714 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d02:	f000 f89f 	bl	8000e44 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	@ 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d58:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <MX_ADC1_Init+0xa0>)
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d76:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d78:	f000 fbd2 	bl	8001520 <HAL_ADC_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f85f 	bl	8000e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <MX_ADC1_Init+0x98>)
 8000d98:	f000 fda4 	bl	80018e4 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000da2:	f000 f84f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <MX_USART2_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f001 feae 	bl	8002b54 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f821 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000c4 	.word	0x200000c4
 8000e0c:	40004400 	.word	0x40004400

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_GPIO_Init+0x30>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <MX_GPIO_Init+0x30>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_GPIO_Init+0x30>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <Bin2BCD>:
 */

#include "rtc.h"

// 00 <= binVal <= 99
uint32_t Bin2BCD(uint32_t binVal) {
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  // get unit place digit
  uint32_t unit = binVal % 10;
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <Bin2BCD+0x44>)
 8000e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e60:	08d9      	lsrs	r1, r3, #3
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
  // get tens place digit
  uint32_t tens = binVal / 10;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <Bin2BCD+0x44>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	613b      	str	r3, [r7, #16]
  // combine tens place digit bin with unit place digit bin
  uint32_t result = (tens << 4) | unit;
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
  return result;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	cccccccd 	.word	0xcccccccd

08000e98 <BCD2Bin>:

// 00 <= bcdVal <= 99
uint32_t BCD2Bin(uint32_t bcdVal) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  // get unit place digit
  uint32_t unit = bcdVal & 0x0F;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	617b      	str	r3, [r7, #20]
  // get tens place digit
  uint32_t tens = (bcdVal & 0xF0) >> 4;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	613b      	str	r3, [r7, #16]
  // combine tens place digit bin with unit place digit bin
  uint32_t result = (tens * 10) + unit;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
  return result;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <RtcInit>:

void RtcInit(RtcDate_t *dt, RtcTime_t *tm) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	//- enable peripheral clock power
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <RtcInit+0xc4>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <RtcInit+0xc4>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
	//- enable access to the RTC registers in PWR control (stm32 manual 5.4)
	PWR->CR |= PWR_CR_DBP;
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <RtcInit+0xc8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2b      	ldr	r2, [pc, #172]	@ (8000f9c <RtcInit+0xc8>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef4:	6013      	str	r3, [r2, #0]
	//- enable LSI in RCC CSR (stm32 manual 7.3.21)
	RCC->CSR |= RCC_CSR_LSION;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <RtcInit+0xc4>)
 8000ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000efa:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <RtcInit+0xc4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6753      	str	r3, [r2, #116]	@ 0x74
	//- wait for LSI ready flag
	while(!(RCC->CSR & RCC_CSR_LSIRDY));
 8000f02:	bf00      	nop
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <RtcInit+0xc4>)
 8000f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f9      	beq.n	8000f04 <RtcInit+0x30>
	//- select LSI (32 KHz) and enable RTC in RCC (BDCR) (stm32 manual 7.3.20)
	RCC->BDCR |= RCC_BDCR_RTCSEL_1;
 8000f10:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <RtcInit+0xc4>)
 8000f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <RtcInit+0xc4>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1a:	6713      	str	r3, [r2, #112]	@ 0x70
	RCC->BDCR &= ~RCC_BDCR_RTCSEL_0;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <RtcInit+0xc4>)
 8000f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f20:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <RtcInit+0xc4>)
 8000f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f26:	6713      	str	r3, [r2, #112]	@ 0x70
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <RtcInit+0xc4>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <RtcInit+0xc4>)
 8000f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f32:	6713      	str	r3, [r2, #112]	@ 0x70
	//- enter key to unlock write protection. key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
	RTC->WPR = 0xCA;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <RtcInit+0xcc>)
 8000f36:	22ca      	movs	r2, #202	@ 0xca
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <RtcInit+0xcc>)
 8000f3c:	2253      	movs	r2, #83	@ 0x53
 8000f3e:	625a      	str	r2, [r3, #36]	@ 0x24
	//- enable rtc setup in RTC ISR (i.e. register init) -- initialization mode
	RTC->ISR |= RTC_ISR_INIT;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <RtcInit+0xcc>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	4a16      	ldr	r2, [pc, #88]	@ (8000fa0 <RtcInit+0xcc>)
 8000f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4a:	60d3      	str	r3, [r2, #12]
	//- wait until register update is allowed
	while(!(RTC->ISR & RTC_ISR_INITF));
 8000f4c:	bf00      	nop
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <RtcInit+0xcc>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f9      	beq.n	8000f4e <RtcInit+0x7a>
	//- set sync & async prescalar in RTC PRER
	RTC->PRER = ((RTC_ASYNC_PR - 1) << RTC_PRER_PREDIV_A_Pos) |
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <RtcInit+0xcc>)
 8000f5c:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <RtcInit+0xd0>)
 8000f5e:	611a      	str	r2, [r3, #16]
					((RTC_SYNC_PR - 1) << RTC_PRER_PREDIV_S_Pos);
	//- set initial date and time
	RtcSetDate(dt);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f821 	bl	8000fa8 <RtcSetDate>
	RtcSetTime(tm);
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f000 f84e 	bl	8001008 <RtcSetTime>
	//- rtc date/time should be read from calendar registers (not shadow registers) (RTC CR)
	RTC->CR |= RTC_CR_BYPSHAD;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <RtcInit+0xcc>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <RtcInit+0xcc>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6093      	str	r3, [r2, #8]
	//- start rtc in free running mode (RTC ISR)
	RTC->ISR &= ~RTC_ISR_INIT;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <RtcInit+0xcc>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <RtcInit+0xcc>)
 8000f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f82:	60d3      	str	r3, [r2, #12]
	//- disable access to RTC registers (write protection) in PWR control
	PWR->CR &= ~PWR_CR_DBP;
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <RtcInit+0xc8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <RtcInit+0xc8>)
 8000f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000
 8000fa0:	40002800 	.word	0x40002800
 8000fa4:	007f00f9 	.word	0x007f00f9

08000fa8 <RtcSetDate>:

void RtcSetDate(RtcDate_t *dt) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	//- Convert binary data into BCD
	uint32_t date = Bin2BCD(dt->date);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff4b 	bl	8000e50 <Bin2BCD>
 8000fba:	61f8      	str	r0, [r7, #28]
	uint32_t month = Bin2BCD(dt->month);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	885b      	ldrh	r3, [r3, #2]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff45 	bl	8000e50 <Bin2BCD>
 8000fc6:	61b8      	str	r0, [r7, #24]
	uint32_t year = Bin2BCD(dt->year);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	889b      	ldrh	r3, [r3, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff3f 	bl	8000e50 <Bin2BCD>
 8000fd2:	6178      	str	r0, [r7, #20]
	uint32_t weekday = Bin2BCD(dt->weekday);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	88db      	ldrh	r3, [r3, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff39 	bl	8000e50 <Bin2BCD>
 8000fde:	6138      	str	r0, [r7, #16]
	//- Set day, month, year, and day of week into a RTC Date Register DR
	uint32_t dr = (date << RTC_DR_DU_Pos) |
			 	 	 (month << RTC_DR_MU_Pos) |
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	021a      	lsls	r2, r3, #8
	uint32_t dr = (date << RTC_DR_DU_Pos) |
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	431a      	orrs	r2, r3
					 (weekday << RTC_DR_WDU_Pos) |
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	035b      	lsls	r3, r3, #13
			 	 	 (month << RTC_DR_MU_Pos) |
 8000fec:	431a      	orrs	r2, r3
					 (year << RTC_DR_YU_Pos);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	041b      	lsls	r3, r3, #16
	uint32_t dr = (date << RTC_DR_DU_Pos) |
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
	RTC->DR = dr;
 8000ff6:	4a03      	ldr	r2, [pc, #12]	@ (8001004 <RtcSetDate+0x5c>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6053      	str	r3, [r2, #4]
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40002800 	.word	0x40002800

08001008 <RtcSetTime>:

void RtcSetTime(RtcTime_t *tm) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//- Convert binary data into BCD
	uint32_t hr = Bin2BCD(tm->hr);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff1b 	bl	8000e50 <Bin2BCD>
 800101a:	6178      	str	r0, [r7, #20]
	uint32_t min = Bin2BCD(tm->min);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff15 	bl	8000e50 <Bin2BCD>
 8001026:	6138      	str	r0, [r7, #16]
	uint32_t sec = Bin2BCD(tm->sec);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff0f 	bl	8000e50 <Bin2BCD>
 8001032:	60f8      	str	r0, [r7, #12]
	//- Set hours, minutes, and seconds into a RTC Time Register TR. Also set AM/PM mode
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
					(min << RTC_TR_MNU_Pos) |
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	021a      	lsls	r2, r3, #8
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	431a      	orrs	r2, r3
					(hr << RTC_TR_HU_Pos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	041b      	lsls	r3, r3, #16
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
 8001040:	4313      	orrs	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
	RTC->TR = tr;
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <RtcSetTime+0x4c>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40002800 	.word	0x40002800

08001058 <RtcGetTime>:
	dt->weekday = BCD2Bin(weekday);
	uint32_t year = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
	dt->year = BCD2Bin(year);
}

void RtcGetTime(RtcTime_t *tm) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	//- Read RTC Time register
	uint32_t tr = RTC->TR;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <RtcGetTime+0x5c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	617b      	str	r3, [r7, #20]
	//- Retrieve hours, minutes, and seconds from TR and convert from BCD to binary
	uint32_t sec = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800106c:	613b      	str	r3, [r7, #16]
	tm->sec = BCD2Bin(sec);
 800106e:	6938      	ldr	r0, [r7, #16]
 8001070:	f7ff ff12 	bl	8000e98 <BCD2Bin>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	809a      	strh	r2, [r3, #4]
	uint32_t min= (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001084:	60fb      	str	r3, [r7, #12]
	tm->min = BCD2Bin(min);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f7ff ff06 	bl	8000e98 <BCD2Bin>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	805a      	strh	r2, [r3, #2]
	uint32_t hr = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800109c:	60bb      	str	r3, [r7, #8]
	tm->hr = BCD2Bin(hr);
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f7ff fefa 	bl	8000e98 <BCD2Bin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	801a      	strh	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40002800 	.word	0x40002800

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010f6:	2007      	movs	r0, #7
 80010f8:	f000 fec4 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_ADC_MspInit+0x7c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d127      	bne.n	800117a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_ADC_MspInit+0x80>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_ADC_MspInit+0x84>)
 8001176:	f000 feb9 	bl	8001eec <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	@ 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012000 	.word	0x40012000
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <HAL_UART_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12b      	bne.n	800120a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_UART_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ea:	230c      	movs	r3, #12
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fa:	2307      	movs	r3, #7
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <HAL_UART_MspInit+0x8c>)
 8001206:	f000 fe71 	bl	8001eec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40004400 	.word	0x40004400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f90f 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f002 f886 	bl	80033c0 <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20020000 	.word	0x20020000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	20000110 	.word	0x20000110
 80012e8:	20000268 	.word	0x20000268

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	@ (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <TIM8_TRG_COM_TIM14_IRQHandler>:
	TIM8->DIER |= TIM_DIER_UIE;
	NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
	TIM8->CR1 |= TIM_CR1_CEN;
}

void TIM8_TRG_COM_TIM14_IRQHandler(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	InitLed(ORANGE);
 8001314:	200d      	movs	r0, #13
 8001316:	f7ff faff 	bl	8000918 <InitLed>
	OnLed(ORANGE);
 800131a:	200d      	movs	r0, #13
 800131c:	f7ff fb1c 	bl	8000958 <OnLed>
	HAL_Delay(100);
 8001320:	2064      	movs	r0, #100	@ 0x64
 8001322:	f000 f8d9 	bl	80014d8 <HAL_Delay>
	OffLed(ORANGE);
 8001326:	200d      	movs	r0, #13
 8001328:	f7ff fb2c 	bl	8000984 <OffLed>

	if(TIM8->SR & TIM_SR_UIF){
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02d      	beq.n	8001394 <TIM8_TRG_COM_TIM14_IRQHandler+0x84>
		TIM8->SR &= ~TIM_SR_UIF;
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6113      	str	r3, [r2, #16]
		for(duty=0; duty<100; duty++) {
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00b      	b.n	8001364 <TIM8_TRG_COM_TIM14_IRQHandler+0x54>
			  				TIM8->CCR1 = duty;
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34
			  				HAL_Delay(40);
 8001354:	2028      	movs	r0, #40	@ 0x28
 8001356:	f000 f8bf 	bl	80014d8 <HAL_Delay>
		for(duty=0; duty<100; duty++) {
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	4a0e      	ldr	r2, [pc, #56]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b63      	cmp	r3, #99	@ 0x63
 800136a:	ddef      	ble.n	800134c <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>
			  			}
			  			for(duty=99; duty>=0; duty--) {
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 800136e:	2263      	movs	r2, #99	@ 0x63
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e00b      	b.n	800138c <TIM8_TRG_COM_TIM14_IRQHandler+0x7c>
			  				TIM8->CCR1 = duty;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <TIM8_TRG_COM_TIM14_IRQHandler+0x88>)
 800137a:	635a      	str	r2, [r3, #52]	@ 0x34
			  				HAL_Delay(40);
 800137c:	2028      	movs	r0, #40	@ 0x28
 800137e:	f000 f8ab 	bl	80014d8 <HAL_Delay>
			  			for(duty=99; duty>=0; duty--) {
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3b01      	subs	r3, #1
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	daef      	bge.n	8001374 <TIM8_TRG_COM_TIM14_IRQHandler+0x64>
			  			}
			  }
	}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010400 	.word	0x40010400
 800139c:	20000114 	.word	0x20000114

080013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a4:	f7ff ffa2 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f001 fffd 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff fb53 	bl	8000a7c <main>
  bx  lr    
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013e4:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 80013e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013ec:	20000264 	.word	0x20000264

080013f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_Init+0x40>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <HAL_Init+0x40>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_Init+0x40>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 fd31 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fe46 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fd3b 	bl	8001ed2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001474:	f000 fd11 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000118 	.word	0x20000118

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000118 	.word	0x20000118

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e033      	b.n	800159e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fde2 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001566:	f023 0302 	bic.w	r3, r3, #2
 800156a:	f043 0202 	orr.w	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fad8 	bl	8001b28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f023 0303 	bic.w	r3, r3, #3
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40
 800158e:	e001      	b.n	8001594 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Start+0x1a>
 80015be:	2302      	movs	r3, #2
 80015c0:	e0b2      	b.n	8001728 <HAL_ADC_Start+0x180>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d018      	beq.n	800160a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e8:	4b52      	ldr	r3, [pc, #328]	@ (8001734 <HAL_ADC_Start+0x18c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_ADC_Start+0x190>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9a      	lsrs	r2, r3, #18
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015fc:	e002      	b.n	8001604 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3b01      	subs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d17a      	bne.n	800170e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	645a      	str	r2, [r3, #68]	@ 0x44
 8001664:	e002      	b.n	800166c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_ADC_Start+0x194>)
 8001676:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001680:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b00      	cmp	r3, #0
 800168c:	d12a      	bne.n	80016e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <HAL_ADC_Start+0x198>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d015      	beq.n	80016c4 <HAL_ADC_Start+0x11c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <HAL_ADC_Start+0x19c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_Start+0x106>
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_ADC_Start+0x194>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a25      	ldr	r2, [pc, #148]	@ (8001748 <HAL_ADC_Start+0x1a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d136      	bne.n	8001726 <HAL_ADC_Start+0x17e>
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_ADC_Start+0x194>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d130      	bne.n	8001726 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d129      	bne.n	8001726 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	e020      	b.n	8001726 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a15      	ldr	r2, [pc, #84]	@ (8001740 <HAL_ADC_Start+0x198>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11b      	bne.n	8001726 <HAL_ADC_Start+0x17e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d114      	bne.n	8001726 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	e00b      	b.n	8001726 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	40012300 	.word	0x40012300
 8001740:	40012000 	.word	0x40012000
 8001744:	40012100 	.word	0x40012100
 8001748:	40012200 	.word	0x40012200

0800174c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Stop+0x16>
 800175e:	2302      	movs	r3, #2
 8001760:	e021      	b.n	80017a6 <HAL_ADC_Stop+0x5a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ce:	d113      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017de:	d10b      	bne.n	80017f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e063      	b.n	80018c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f8:	f7ff fe62 	bl	80014c0 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017fe:	e021      	b.n	8001844 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001806:	d01d      	beq.n	8001844 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_ADC_PollForConversion+0x6c>
 800180e:	f7ff fe57 	bl	80014c0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d212      	bcs.n	8001844 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b02      	cmp	r3, #2
 800182a:	d00b      	beq.n	8001844 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f043 0204 	orr.w	r2, r3, #4
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03d      	b.n	80018c0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d1d6      	bne.n	8001800 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0212 	mvn.w	r2, #18
 800185a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d123      	bne.n	80018be <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11f      	bne.n	80018be <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001896:	2b00      	cmp	r3, #0
 8001898:	d111      	bne.n	80018be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e105      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x228>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b09      	cmp	r3, #9
 800190e:	d925      	bls.n	800195c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68d9      	ldr	r1, [r3, #12]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	3b1e      	subs	r3, #30
 8001926:	2207      	movs	r2, #7
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43da      	mvns	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	400a      	ands	r2, r1
 8001934:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68d9      	ldr	r1, [r3, #12]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	4603      	mov	r3, r0
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4403      	add	r3, r0
 800194e:	3b1e      	subs	r3, #30
 8001950:	409a      	lsls	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	e022      	b.n	80019a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6919      	ldr	r1, [r3, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	2207      	movs	r2, #7
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6919      	ldr	r1, [r3, #16]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	4603      	mov	r3, r0
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4403      	add	r3, r0
 8001998:	409a      	lsls	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d824      	bhi.n	80019f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3b05      	subs	r3, #5
 80019bc:	221f      	movs	r2, #31
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	400a      	ands	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b05      	subs	r3, #5
 80019e6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f2:	e04c      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d824      	bhi.n	8001a46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b23      	subs	r3, #35	@ 0x23
 8001a0e:	221f      	movs	r2, #31
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43da      	mvns	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b23      	subs	r3, #35	@ 0x23
 8001a38:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a44:	e023      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	3b41      	subs	r3, #65	@ 0x41
 8001a58:	221f      	movs	r2, #31
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b41      	subs	r3, #65	@ 0x41
 8001a82:	fa00 f203 	lsl.w	r2, r0, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_ADC_ConfigChannel+0x234>)
 8001a90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <HAL_ADC_ConfigChannel+0x238>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1cc>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	@ (8001b1c <HAL_ADC_ConfigChannel+0x238>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d123      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x21e>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d003      	beq.n	8001aca <HAL_ADC_ConfigChannel+0x1e6>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d11b      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d111      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_ADC_ConfigChannel+0x23c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <HAL_ADC_ConfigChannel+0x240>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	0c9a      	lsrs	r2, r3, #18
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af4:	e002      	b.n	8001afc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f9      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40012300 	.word	0x40012300
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b30:	4b79      	ldr	r3, [pc, #484]	@ (8001d18 <ADC_Init+0x1f0>)
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <ADC_Init+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e00f      	b.n	8001c26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0202 	bic.w	r2, r2, #2
 8001c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
 8001c40:	005a      	lsls	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	035a      	lsls	r2, r3, #13
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e007      	b.n	8001c9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	051a      	lsls	r2, r3, #20
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cde:	025a      	lsls	r2, r3, #9
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	029a      	lsls	r2, r3, #10
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40012300 	.word	0x40012300
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <__NVIC_SetPriorityGrouping>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff47 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff5c 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffb0 	bl	8001e40 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e16b      	b.n	80021e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 815a 	bne.w	80021da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80b4 	beq.w	80021da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b60      	ldr	r3, [pc, #384]	@ (80021f8 <HAL_GPIO_Init+0x30c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4a5f      	ldr	r2, [pc, #380]	@ (80021f8 <HAL_GPIO_Init+0x30c>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002080:	6453      	str	r3, [r2, #68]	@ 0x44
 8002082:	4b5d      	ldr	r3, [pc, #372]	@ (80021f8 <HAL_GPIO_Init+0x30c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a5b      	ldr	r2, [pc, #364]	@ (80021fc <HAL_GPIO_Init+0x310>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	@ (8002200 <HAL_GPIO_Init+0x314>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02b      	beq.n	8002112 <HAL_GPIO_Init+0x226>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a51      	ldr	r2, [pc, #324]	@ (8002204 <HAL_GPIO_Init+0x318>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x222>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a50      	ldr	r2, [pc, #320]	@ (8002208 <HAL_GPIO_Init+0x31c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x21e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	@ (800220c <HAL_GPIO_Init+0x320>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002210 <HAL_GPIO_Init+0x324>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x216>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002214 <HAL_GPIO_Init+0x328>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x212>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002218 <HAL_GPIO_Init+0x32c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x20e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	@ (800221c <HAL_GPIO_Init+0x330>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x20a>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020f6:	2308      	movs	r3, #8
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x228>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x228>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	@ (80021fc <HAL_GPIO_Init+0x310>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <HAL_GPIO_Init+0x334>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a32      	ldr	r2, [pc, #200]	@ (8002220 <HAL_GPIO_Init+0x334>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_GPIO_Init+0x334>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a27      	ldr	r2, [pc, #156]	@ (8002220 <HAL_GPIO_Init+0x334>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <HAL_GPIO_Init+0x334>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <HAL_GPIO_Init+0x334>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_GPIO_Init+0x334>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_GPIO_Init+0x334>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae90 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e267      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002242:	4b88      	ldr	r3, [pc, #544]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b85      	ldr	r3, [pc, #532]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b7e      	ldr	r3, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e242      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b69      	ldr	r3, [pc, #420]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f8f0 	bl	80014c0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff f8ec 	bl	80014c0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e207      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff f8dc 	bl	80014c0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff f8d8 	bl	80014c0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1f3      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800233a:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c7      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4937      	ldr	r1, [pc, #220]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7ff f891 	bl	80014c0 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff f88d 	bl	80014c0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a8      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4925      	ldr	r1, [pc, #148]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f870 	bl	80014c0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff f86c 	bl	80014c0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e187      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d036      	beq.n	800247c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7ff f850 	bl	80014c0 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff f84c 	bl	80014c0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e167      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e01b      	b.n	800247c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff f839 	bl	80014c0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e00e      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff f835 	bl	80014c0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d907      	bls.n	8002470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e150      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002464:	40023800 	.word	0x40023800
 8002468:	42470000 	.word	0x42470000
 800246c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ea      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8097 	beq.w	80025b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b81      	ldr	r3, [pc, #516]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b7d      	ldr	r3, [pc, #500]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b74      	ldr	r3, [pc, #464]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a73      	ldr	r2, [pc, #460]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fff5 	bl	80014c0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fff1 	bl	80014c0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e10c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x2ea>
 8002500:	4b64      	ldr	r3, [pc, #400]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a63      	ldr	r2, [pc, #396]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
 800250c:	e01c      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x30c>
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 8002530:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
 800253c:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	4a54      	ldr	r2, [pc, #336]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe ffb6 	bl	80014c0 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe ffb2 	bl	80014c0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0cb      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ee      	beq.n	8002558 <HAL_RCC_OscConfig+0x334>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe ffa0 	bl	80014c0 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe ff9c 	bl	80014c0 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b5      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ee      	bne.n	8002584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	4a38      	ldr	r2, [pc, #224]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a1 	beq.w	8002704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c2:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d05c      	beq.n	8002688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d141      	bne.n	800265a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff70 	bl	80014c0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe ff6c 	bl	80014c0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e087      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	491b      	ldr	r1, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe ff45 	bl	80014c0 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe ff41 	bl	80014c0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e05c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x416>
 8002658:	e054      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe ff2e 	bl	80014c0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe ff2a 	bl	80014c0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e045      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e038      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x4ec>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d121      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11a      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fe5c 	bl	80014c0 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fe58 	bl	80014c0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fdbc 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08003d64 	.word	0x08003d64
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b094      	sub	sp, #80	@ 0x50
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80e1 	bhi.w	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0db      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002918:	e0db      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800291c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291e:	e0d8      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002928:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	2200      	movs	r2, #0
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002940:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
 800294e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4621      	mov	r1, r4
 800296c:	1a51      	subs	r1, r2, r1
 800296e:	6139      	str	r1, [r7, #16]
 8002970:	4629      	mov	r1, r5
 8002972:	eb63 0301 	sbc.w	r3, r3, r1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002984:	4659      	mov	r1, fp
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298e:	4651      	mov	r1, sl
 8002990:	018a      	lsls	r2, r1, #6
 8002992:	4651      	mov	r1, sl
 8002994:	ebb2 0801 	subs.w	r8, r2, r1
 8002998:	4659      	mov	r1, fp
 800299a:	eb63 0901 	sbc.w	r9, r3, r1
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b2:	4690      	mov	r8, r2
 80029b4:	4699      	mov	r9, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	eb18 0303 	adds.w	r3, r8, r3
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	462b      	mov	r3, r5
 80029c0:	eb49 0303 	adc.w	r3, r9, r3
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029d2:	4629      	mov	r1, r5
 80029d4:	024b      	lsls	r3, r1, #9
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029dc:	4621      	mov	r1, r4
 80029de:	024a      	lsls	r2, r1, #9
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029f0:	f7fd fc46 	bl	8000280 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4613      	mov	r3, r2
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029fc:	e058      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	4611      	mov	r1, r2
 8002a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0159      	lsls	r1, r3, #5
 8002a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2a:	0150      	lsls	r0, r2, #5
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4641      	mov	r1, r8
 8002a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a50:	ebb2 040a 	subs.w	r4, r2, sl
 8002a54:	eb63 050b 	sbc.w	r5, r3, fp
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	00eb      	lsls	r3, r5, #3
 8002a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a66:	00e2      	lsls	r2, r4, #3
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	18e3      	adds	r3, r4, r3
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	464b      	mov	r3, r9
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	61fa      	str	r2, [r7, #28]
 8002aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa4:	f7fd fbec 	bl	8000280 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3750      	adds	r7, #80	@ 0x50
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08003d74 	.word	0x08003d74

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08003d74 	.word	0x08003d74

08002b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e042      	b.n	8002bec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fb08 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	@ 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f973 	bl	8002e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	@ 0x28
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d175      	bne.n	8002d00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_UART_Transmit+0x2c>
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e06e      	b.n	8002d02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2221      	movs	r2, #33	@ 0x21
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c32:	f7fe fc45 	bl	80014c0 <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4c:	d108      	bne.n	8002c60 <HAL_UART_Transmit+0x6c>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e003      	b.n	8002c68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c68:	e02e      	b.n	8002cc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	@ 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f848 	bl	8002d0a <UART_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e03a      	b.n	8002d02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e007      	b.n	8002cba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cb      	bne.n	8002c6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	@ 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f814 	bl	8002d0a <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1a:	e03b      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d22:	d037      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7fe fbcc 	bl	80014c0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e03a      	b.n	8002db4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d023      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d020      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d01d      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d116      	bne.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f81d 	bl	8002dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2208      	movs	r2, #8
 8002d86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e00f      	b.n	8002db4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d0b4      	beq.n	8002d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b095      	sub	sp, #84	@ 0x54
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002de4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d119      	bne.n	8002e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e54:	61ba      	str	r2, [r7, #24]
 8002e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6979      	ldr	r1, [r7, #20]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	613b      	str	r3, [r7, #16]
   return(result);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e5      	bne.n	8002e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e76:	bf00      	nop
 8002e78:	3754      	adds	r7, #84	@ 0x54
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b0c0      	sub	sp, #256	@ 0x100
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	ea40 0301 	orr.w	r3, r0, r1
 8002eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002edc:	f021 010c 	bic.w	r1, r1, #12
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	6999      	ldr	r1, [r3, #24]
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	ea40 0301 	orr.w	r3, r0, r1
 8002f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8f      	ldr	r3, [pc, #572]	@ (8003150 <UART_SetConfig+0x2cc>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <UART_SetConfig+0xa0>
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003154 <UART_SetConfig+0x2d0>)
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d104      	bne.n	8002f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7ff fe02 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8002f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f2c:	e003      	b.n	8002f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2e:	f7ff fde9 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8002f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f40:	f040 810c 	bne.w	800315c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f66:	4621      	mov	r1, r4
 8002f68:	eb12 0801 	adds.w	r8, r2, r1
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	eb43 0901 	adc.w	r9, r3, r1
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f86:	4690      	mov	r8, r2
 8002f88:	4699      	mov	r9, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	eb18 0303 	adds.w	r3, r8, r3
 8002f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f94:	462b      	mov	r3, r5
 8002f96:	eb49 0303 	adc.w	r3, r9, r3
 8002f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	18db      	adds	r3, r3, r3
 8002fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb8:	4613      	mov	r3, r2
 8002fba:	eb42 0303 	adc.w	r3, r2, r3
 8002fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fc8:	f7fd f95a 	bl	8000280 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <UART_SetConfig+0x2d4>)
 8002fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	011c      	lsls	r4, r3, #4
 8002fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb43 0b01 	adc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800301c:	4692      	mov	sl, r2
 800301e:	469b      	mov	fp, r3
 8003020:	4643      	mov	r3, r8
 8003022:	eb1a 0303 	adds.w	r3, sl, r3
 8003026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800302a:	464b      	mov	r3, r9
 800302c:	eb4b 0303 	adc.w	r3, fp, r3
 8003030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003048:	460b      	mov	r3, r1
 800304a:	18db      	adds	r3, r3, r3
 800304c:	643b      	str	r3, [r7, #64]	@ 0x40
 800304e:	4613      	mov	r3, r2
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	647b      	str	r3, [r7, #68]	@ 0x44
 8003056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800305a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800305e:	f7fd f90f 	bl	8000280 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4611      	mov	r1, r2
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <UART_SetConfig+0x2d4>)
 800306a:	fba3 2301 	umull	r2, r3, r3, r1
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2264      	movs	r2, #100	@ 0x64
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	1acb      	subs	r3, r1, r3
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800307e:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003080:	fba3 2302 	umull	r2, r3, r3, r2
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800308c:	441c      	add	r4, r3
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800309c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030a8:	415b      	adcs	r3, r3
 80030aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030b0:	4641      	mov	r1, r8
 80030b2:	1851      	adds	r1, r2, r1
 80030b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80030b6:	4649      	mov	r1, r9
 80030b8:	414b      	adcs	r3, r1
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030c8:	4659      	mov	r1, fp
 80030ca:	00cb      	lsls	r3, r1, #3
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d2:	4651      	mov	r1, sl
 80030d4:	00ca      	lsls	r2, r1, #3
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	4642      	mov	r2, r8
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e4:	464b      	mov	r3, r9
 80030e6:	460a      	mov	r2, r1
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003104:	460b      	mov	r3, r1
 8003106:	18db      	adds	r3, r3, r3
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310a:	4613      	mov	r3, r2
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800311a:	f7fd f8b1 	bl	8000280 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	@ 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3332      	adds	r3, #50	@ 0x32
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f003 0207 	and.w	r2, r3, #7
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4422      	add	r2, r4
 800314a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800314c:	e106      	b.n	800335c <UART_SetConfig+0x4d8>
 800314e:	bf00      	nop
 8003150:	40011000 	.word	0x40011000
 8003154:	40011400 	.word	0x40011400
 8003158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003160:	2200      	movs	r2, #0
 8003162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800316a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800316e:	4642      	mov	r2, r8
 8003170:	464b      	mov	r3, r9
 8003172:	1891      	adds	r1, r2, r2
 8003174:	6239      	str	r1, [r7, #32]
 8003176:	415b      	adcs	r3, r3
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
 800317a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317e:	4641      	mov	r1, r8
 8003180:	1854      	adds	r4, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb43 0501 	adc.w	r5, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	00eb      	lsls	r3, r5, #3
 8003192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003196:	00e2      	lsls	r2, r4, #3
 8003198:	4614      	mov	r4, r2
 800319a:	461d      	mov	r5, r3
 800319c:	4643      	mov	r3, r8
 800319e:	18e3      	adds	r3, r4, r3
 80031a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a4:	464b      	mov	r3, r9
 80031a6:	eb45 0303 	adc.w	r3, r5, r3
 80031aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031ca:	4629      	mov	r1, r5
 80031cc:	008b      	lsls	r3, r1, #2
 80031ce:	4621      	mov	r1, r4
 80031d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d4:	4621      	mov	r1, r4
 80031d6:	008a      	lsls	r2, r1, #2
 80031d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031dc:	f7fd f850 	bl	8000280 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b60      	ldr	r3, [pc, #384]	@ (8003368 <UART_SetConfig+0x4e4>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	011c      	lsls	r4, r3, #4
 80031ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	61b9      	str	r1, [r7, #24]
 8003208:	415b      	adcs	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	4641      	mov	r1, r8
 8003212:	1851      	adds	r1, r2, r1
 8003214:	6139      	str	r1, [r7, #16]
 8003216:	4649      	mov	r1, r9
 8003218:	414b      	adcs	r3, r1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003228:	4659      	mov	r1, fp
 800322a:	00cb      	lsls	r3, r1, #3
 800322c:	4651      	mov	r1, sl
 800322e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003232:	4651      	mov	r1, sl
 8003234:	00ca      	lsls	r2, r1, #3
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	4603      	mov	r3, r0
 800323c:	4642      	mov	r2, r8
 800323e:	189b      	adds	r3, r3, r2
 8003240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003244:	464b      	mov	r3, r9
 8003246:	460a      	mov	r2, r1
 8003248:	eb42 0303 	adc.w	r3, r2, r3
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800325a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003268:	4649      	mov	r1, r9
 800326a:	008b      	lsls	r3, r1, #2
 800326c:	4641      	mov	r1, r8
 800326e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003272:	4641      	mov	r1, r8
 8003274:	008a      	lsls	r2, r1, #2
 8003276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800327a:	f7fd f801 	bl	8000280 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4611      	mov	r1, r2
 8003284:	4b38      	ldr	r3, [pc, #224]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003286:	fba3 2301 	umull	r2, r3, r3, r1
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	@ 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1acb      	subs	r3, r1, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a33      	ldr	r2, [pc, #204]	@ (8003368 <UART_SetConfig+0x4e4>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a4:	441c      	add	r4, r3
 80032a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032aa:	2200      	movs	r2, #0
 80032ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80032b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	415b      	adcs	r3, r3
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c4:	4641      	mov	r1, r8
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	4649      	mov	r1, r9
 80032cc:	414b      	adcs	r3, r1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032dc:	4659      	mov	r1, fp
 80032de:	00cb      	lsls	r3, r1, #3
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e6:	4651      	mov	r1, sl
 80032e8:	00ca      	lsls	r2, r1, #3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	4642      	mov	r2, r8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032f6:	464b      	mov	r3, r9
 80032f8:	460a      	mov	r2, r1
 80032fa:	eb42 0303 	adc.w	r3, r2, r3
 80032fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	663b      	str	r3, [r7, #96]	@ 0x60
 800330a:	667a      	str	r2, [r7, #100]	@ 0x64
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003318:	4649      	mov	r1, r9
 800331a:	008b      	lsls	r3, r1, #2
 800331c:	4641      	mov	r1, r8
 800331e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003322:	4641      	mov	r1, r8
 8003324:	008a      	lsls	r2, r1, #2
 8003326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800332a:	f7fc ffa9 	bl	8000280 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	@ 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	3332      	adds	r3, #50	@ 0x32
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4422      	add	r2, r4
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003362:	46bd      	mov	sp, r7
 8003364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003368:	51eb851f 	.word	0x51eb851f

0800336c <siprintf>:
 800336c:	b40e      	push	{r1, r2, r3}
 800336e:	b510      	push	{r4, lr}
 8003370:	b09d      	sub	sp, #116	@ 0x74
 8003372:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003374:	9002      	str	r0, [sp, #8]
 8003376:	9006      	str	r0, [sp, #24]
 8003378:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800337c:	480a      	ldr	r0, [pc, #40]	@ (80033a8 <siprintf+0x3c>)
 800337e:	9107      	str	r1, [sp, #28]
 8003380:	9104      	str	r1, [sp, #16]
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <siprintf+0x40>)
 8003384:	f853 2b04 	ldr.w	r2, [r3], #4
 8003388:	9105      	str	r1, [sp, #20]
 800338a:	2400      	movs	r4, #0
 800338c:	a902      	add	r1, sp, #8
 800338e:	6800      	ldr	r0, [r0, #0]
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003394:	f000 f994 	bl	80036c0 <_svfiprintf_r>
 8003398:	9b02      	ldr	r3, [sp, #8]
 800339a:	701c      	strb	r4, [r3, #0]
 800339c:	b01d      	add	sp, #116	@ 0x74
 800339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a2:	b003      	add	sp, #12
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	ffff0208 	.word	0xffff0208

080033b0 <memset>:
 80033b0:	4402      	add	r2, r0
 80033b2:	4603      	mov	r3, r0
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d100      	bne.n	80033ba <memset+0xa>
 80033b8:	4770      	bx	lr
 80033ba:	f803 1b01 	strb.w	r1, [r3], #1
 80033be:	e7f9      	b.n	80033b4 <memset+0x4>

080033c0 <__errno>:
 80033c0:	4b01      	ldr	r3, [pc, #4]	@ (80033c8 <__errno+0x8>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000000c 	.word	0x2000000c

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003408 <__libc_init_array+0x3c>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2600      	movs	r6, #0
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4d0b      	ldr	r5, [pc, #44]	@ (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	@ (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 fc64 	bl	8003cac <_init>
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2600      	movs	r6, #0
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08003db8 	.word	0x08003db8
 8003408:	08003db8 	.word	0x08003db8
 800340c:	08003db8 	.word	0x08003db8
 8003410:	08003dbc 	.word	0x08003dbc

08003414 <__retarget_lock_acquire_recursive>:
 8003414:	4770      	bx	lr

08003416 <__retarget_lock_release_recursive>:
 8003416:	4770      	bx	lr

08003418 <_free_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4605      	mov	r5, r0
 800341c:	2900      	cmp	r1, #0
 800341e:	d041      	beq.n	80034a4 <_free_r+0x8c>
 8003420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003424:	1f0c      	subs	r4, r1, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	bfb8      	it	lt
 800342a:	18e4      	addlt	r4, r4, r3
 800342c:	f000 f8e0 	bl	80035f0 <__malloc_lock>
 8003430:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <_free_r+0x90>)
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	b933      	cbnz	r3, 8003444 <_free_r+0x2c>
 8003436:	6063      	str	r3, [r4, #4]
 8003438:	6014      	str	r4, [r2, #0]
 800343a:	4628      	mov	r0, r5
 800343c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003440:	f000 b8dc 	b.w	80035fc <__malloc_unlock>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d908      	bls.n	800345a <_free_r+0x42>
 8003448:	6820      	ldr	r0, [r4, #0]
 800344a:	1821      	adds	r1, r4, r0
 800344c:	428b      	cmp	r3, r1
 800344e:	bf01      	itttt	eq
 8003450:	6819      	ldreq	r1, [r3, #0]
 8003452:	685b      	ldreq	r3, [r3, #4]
 8003454:	1809      	addeq	r1, r1, r0
 8003456:	6021      	streq	r1, [r4, #0]
 8003458:	e7ed      	b.n	8003436 <_free_r+0x1e>
 800345a:	461a      	mov	r2, r3
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b10b      	cbz	r3, 8003464 <_free_r+0x4c>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d9fa      	bls.n	800345a <_free_r+0x42>
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	1850      	adds	r0, r2, r1
 8003468:	42a0      	cmp	r0, r4
 800346a:	d10b      	bne.n	8003484 <_free_r+0x6c>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	4401      	add	r1, r0
 8003470:	1850      	adds	r0, r2, r1
 8003472:	4283      	cmp	r3, r0
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	d1e0      	bne.n	800343a <_free_r+0x22>
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	4408      	add	r0, r1
 8003480:	6010      	str	r0, [r2, #0]
 8003482:	e7da      	b.n	800343a <_free_r+0x22>
 8003484:	d902      	bls.n	800348c <_free_r+0x74>
 8003486:	230c      	movs	r3, #12
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	e7d6      	b.n	800343a <_free_r+0x22>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	1821      	adds	r1, r4, r0
 8003490:	428b      	cmp	r3, r1
 8003492:	bf04      	itt	eq
 8003494:	6819      	ldreq	r1, [r3, #0]
 8003496:	685b      	ldreq	r3, [r3, #4]
 8003498:	6063      	str	r3, [r4, #4]
 800349a:	bf04      	itt	eq
 800349c:	1809      	addeq	r1, r1, r0
 800349e:	6021      	streq	r1, [r4, #0]
 80034a0:	6054      	str	r4, [r2, #4]
 80034a2:	e7ca      	b.n	800343a <_free_r+0x22>
 80034a4:	bd38      	pop	{r3, r4, r5, pc}
 80034a6:	bf00      	nop
 80034a8:	20000260 	.word	0x20000260

080034ac <sbrk_aligned>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	4e0f      	ldr	r6, [pc, #60]	@ (80034ec <sbrk_aligned+0x40>)
 80034b0:	460c      	mov	r4, r1
 80034b2:	6831      	ldr	r1, [r6, #0]
 80034b4:	4605      	mov	r5, r0
 80034b6:	b911      	cbnz	r1, 80034be <sbrk_aligned+0x12>
 80034b8:	f000 fba4 	bl	8003c04 <_sbrk_r>
 80034bc:	6030      	str	r0, [r6, #0]
 80034be:	4621      	mov	r1, r4
 80034c0:	4628      	mov	r0, r5
 80034c2:	f000 fb9f 	bl	8003c04 <_sbrk_r>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	d103      	bne.n	80034d2 <sbrk_aligned+0x26>
 80034ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034ce:	4620      	mov	r0, r4
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
 80034d2:	1cc4      	adds	r4, r0, #3
 80034d4:	f024 0403 	bic.w	r4, r4, #3
 80034d8:	42a0      	cmp	r0, r4
 80034da:	d0f8      	beq.n	80034ce <sbrk_aligned+0x22>
 80034dc:	1a21      	subs	r1, r4, r0
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 fb90 	bl	8003c04 <_sbrk_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d1f2      	bne.n	80034ce <sbrk_aligned+0x22>
 80034e8:	e7ef      	b.n	80034ca <sbrk_aligned+0x1e>
 80034ea:	bf00      	nop
 80034ec:	2000025c 	.word	0x2000025c

080034f0 <_malloc_r>:
 80034f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f4:	1ccd      	adds	r5, r1, #3
 80034f6:	f025 0503 	bic.w	r5, r5, #3
 80034fa:	3508      	adds	r5, #8
 80034fc:	2d0c      	cmp	r5, #12
 80034fe:	bf38      	it	cc
 8003500:	250c      	movcc	r5, #12
 8003502:	2d00      	cmp	r5, #0
 8003504:	4606      	mov	r6, r0
 8003506:	db01      	blt.n	800350c <_malloc_r+0x1c>
 8003508:	42a9      	cmp	r1, r5
 800350a:	d904      	bls.n	8003516 <_malloc_r+0x26>
 800350c:	230c      	movs	r3, #12
 800350e:	6033      	str	r3, [r6, #0]
 8003510:	2000      	movs	r0, #0
 8003512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035ec <_malloc_r+0xfc>
 800351a:	f000 f869 	bl	80035f0 <__malloc_lock>
 800351e:	f8d8 3000 	ldr.w	r3, [r8]
 8003522:	461c      	mov	r4, r3
 8003524:	bb44      	cbnz	r4, 8003578 <_malloc_r+0x88>
 8003526:	4629      	mov	r1, r5
 8003528:	4630      	mov	r0, r6
 800352a:	f7ff ffbf 	bl	80034ac <sbrk_aligned>
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	4604      	mov	r4, r0
 8003532:	d158      	bne.n	80035e6 <_malloc_r+0xf6>
 8003534:	f8d8 4000 	ldr.w	r4, [r8]
 8003538:	4627      	mov	r7, r4
 800353a:	2f00      	cmp	r7, #0
 800353c:	d143      	bne.n	80035c6 <_malloc_r+0xd6>
 800353e:	2c00      	cmp	r4, #0
 8003540:	d04b      	beq.n	80035da <_malloc_r+0xea>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	4639      	mov	r1, r7
 8003546:	4630      	mov	r0, r6
 8003548:	eb04 0903 	add.w	r9, r4, r3
 800354c:	f000 fb5a 	bl	8003c04 <_sbrk_r>
 8003550:	4581      	cmp	r9, r0
 8003552:	d142      	bne.n	80035da <_malloc_r+0xea>
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	1a6d      	subs	r5, r5, r1
 8003558:	4629      	mov	r1, r5
 800355a:	4630      	mov	r0, r6
 800355c:	f7ff ffa6 	bl	80034ac <sbrk_aligned>
 8003560:	3001      	adds	r0, #1
 8003562:	d03a      	beq.n	80035da <_malloc_r+0xea>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	442b      	add	r3, r5
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	f8d8 3000 	ldr.w	r3, [r8]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	bb62      	cbnz	r2, 80035cc <_malloc_r+0xdc>
 8003572:	f8c8 7000 	str.w	r7, [r8]
 8003576:	e00f      	b.n	8003598 <_malloc_r+0xa8>
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	1b52      	subs	r2, r2, r5
 800357c:	d420      	bmi.n	80035c0 <_malloc_r+0xd0>
 800357e:	2a0b      	cmp	r2, #11
 8003580:	d917      	bls.n	80035b2 <_malloc_r+0xc2>
 8003582:	1961      	adds	r1, r4, r5
 8003584:	42a3      	cmp	r3, r4
 8003586:	6025      	str	r5, [r4, #0]
 8003588:	bf18      	it	ne
 800358a:	6059      	strne	r1, [r3, #4]
 800358c:	6863      	ldr	r3, [r4, #4]
 800358e:	bf08      	it	eq
 8003590:	f8c8 1000 	streq.w	r1, [r8]
 8003594:	5162      	str	r2, [r4, r5]
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	4630      	mov	r0, r6
 800359a:	f000 f82f 	bl	80035fc <__malloc_unlock>
 800359e:	f104 000b 	add.w	r0, r4, #11
 80035a2:	1d23      	adds	r3, r4, #4
 80035a4:	f020 0007 	bic.w	r0, r0, #7
 80035a8:	1ac2      	subs	r2, r0, r3
 80035aa:	bf1c      	itt	ne
 80035ac:	1a1b      	subne	r3, r3, r0
 80035ae:	50a3      	strne	r3, [r4, r2]
 80035b0:	e7af      	b.n	8003512 <_malloc_r+0x22>
 80035b2:	6862      	ldr	r2, [r4, #4]
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	bf0c      	ite	eq
 80035b8:	f8c8 2000 	streq.w	r2, [r8]
 80035bc:	605a      	strne	r2, [r3, #4]
 80035be:	e7eb      	b.n	8003598 <_malloc_r+0xa8>
 80035c0:	4623      	mov	r3, r4
 80035c2:	6864      	ldr	r4, [r4, #4]
 80035c4:	e7ae      	b.n	8003524 <_malloc_r+0x34>
 80035c6:	463c      	mov	r4, r7
 80035c8:	687f      	ldr	r7, [r7, #4]
 80035ca:	e7b6      	b.n	800353a <_malloc_r+0x4a>
 80035cc:	461a      	mov	r2, r3
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d1fb      	bne.n	80035cc <_malloc_r+0xdc>
 80035d4:	2300      	movs	r3, #0
 80035d6:	6053      	str	r3, [r2, #4]
 80035d8:	e7de      	b.n	8003598 <_malloc_r+0xa8>
 80035da:	230c      	movs	r3, #12
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	4630      	mov	r0, r6
 80035e0:	f000 f80c 	bl	80035fc <__malloc_unlock>
 80035e4:	e794      	b.n	8003510 <_malloc_r+0x20>
 80035e6:	6005      	str	r5, [r0, #0]
 80035e8:	e7d6      	b.n	8003598 <_malloc_r+0xa8>
 80035ea:	bf00      	nop
 80035ec:	20000260 	.word	0x20000260

080035f0 <__malloc_lock>:
 80035f0:	4801      	ldr	r0, [pc, #4]	@ (80035f8 <__malloc_lock+0x8>)
 80035f2:	f7ff bf0f 	b.w	8003414 <__retarget_lock_acquire_recursive>
 80035f6:	bf00      	nop
 80035f8:	20000258 	.word	0x20000258

080035fc <__malloc_unlock>:
 80035fc:	4801      	ldr	r0, [pc, #4]	@ (8003604 <__malloc_unlock+0x8>)
 80035fe:	f7ff bf0a 	b.w	8003416 <__retarget_lock_release_recursive>
 8003602:	bf00      	nop
 8003604:	20000258 	.word	0x20000258

08003608 <__ssputs_r>:
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	688e      	ldr	r6, [r1, #8]
 800360e:	461f      	mov	r7, r3
 8003610:	42be      	cmp	r6, r7
 8003612:	680b      	ldr	r3, [r1, #0]
 8003614:	4682      	mov	sl, r0
 8003616:	460c      	mov	r4, r1
 8003618:	4690      	mov	r8, r2
 800361a:	d82d      	bhi.n	8003678 <__ssputs_r+0x70>
 800361c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003620:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003624:	d026      	beq.n	8003674 <__ssputs_r+0x6c>
 8003626:	6965      	ldr	r5, [r4, #20]
 8003628:	6909      	ldr	r1, [r1, #16]
 800362a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800362e:	eba3 0901 	sub.w	r9, r3, r1
 8003632:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003636:	1c7b      	adds	r3, r7, #1
 8003638:	444b      	add	r3, r9
 800363a:	106d      	asrs	r5, r5, #1
 800363c:	429d      	cmp	r5, r3
 800363e:	bf38      	it	cc
 8003640:	461d      	movcc	r5, r3
 8003642:	0553      	lsls	r3, r2, #21
 8003644:	d527      	bpl.n	8003696 <__ssputs_r+0x8e>
 8003646:	4629      	mov	r1, r5
 8003648:	f7ff ff52 	bl	80034f0 <_malloc_r>
 800364c:	4606      	mov	r6, r0
 800364e:	b360      	cbz	r0, 80036aa <__ssputs_r+0xa2>
 8003650:	6921      	ldr	r1, [r4, #16]
 8003652:	464a      	mov	r2, r9
 8003654:	f000 fae6 	bl	8003c24 <memcpy>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800365e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	6126      	str	r6, [r4, #16]
 8003666:	6165      	str	r5, [r4, #20]
 8003668:	444e      	add	r6, r9
 800366a:	eba5 0509 	sub.w	r5, r5, r9
 800366e:	6026      	str	r6, [r4, #0]
 8003670:	60a5      	str	r5, [r4, #8]
 8003672:	463e      	mov	r6, r7
 8003674:	42be      	cmp	r6, r7
 8003676:	d900      	bls.n	800367a <__ssputs_r+0x72>
 8003678:	463e      	mov	r6, r7
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	4632      	mov	r2, r6
 800367e:	4641      	mov	r1, r8
 8003680:	f000 faa6 	bl	8003bd0 <memmove>
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	1b9b      	subs	r3, r3, r6
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	4433      	add	r3, r6
 800368e:	6023      	str	r3, [r4, #0]
 8003690:	2000      	movs	r0, #0
 8003692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003696:	462a      	mov	r2, r5
 8003698:	f000 fad2 	bl	8003c40 <_realloc_r>
 800369c:	4606      	mov	r6, r0
 800369e:	2800      	cmp	r0, #0
 80036a0:	d1e0      	bne.n	8003664 <__ssputs_r+0x5c>
 80036a2:	6921      	ldr	r1, [r4, #16]
 80036a4:	4650      	mov	r0, sl
 80036a6:	f7ff feb7 	bl	8003418 <_free_r>
 80036aa:	230c      	movs	r3, #12
 80036ac:	f8ca 3000 	str.w	r3, [sl]
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036bc:	e7e9      	b.n	8003692 <__ssputs_r+0x8a>
	...

080036c0 <_svfiprintf_r>:
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	4698      	mov	r8, r3
 80036c6:	898b      	ldrh	r3, [r1, #12]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	b09d      	sub	sp, #116	@ 0x74
 80036cc:	4607      	mov	r7, r0
 80036ce:	460d      	mov	r5, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	d510      	bpl.n	80036f6 <_svfiprintf_r+0x36>
 80036d4:	690b      	ldr	r3, [r1, #16]
 80036d6:	b973      	cbnz	r3, 80036f6 <_svfiprintf_r+0x36>
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	f7ff ff09 	bl	80034f0 <_malloc_r>
 80036de:	6028      	str	r0, [r5, #0]
 80036e0:	6128      	str	r0, [r5, #16]
 80036e2:	b930      	cbnz	r0, 80036f2 <_svfiprintf_r+0x32>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ec:	b01d      	add	sp, #116	@ 0x74
 80036ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f2:	2340      	movs	r3, #64	@ 0x40
 80036f4:	616b      	str	r3, [r5, #20]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80036fa:	2320      	movs	r3, #32
 80036fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003700:	f8cd 800c 	str.w	r8, [sp, #12]
 8003704:	2330      	movs	r3, #48	@ 0x30
 8003706:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038a4 <_svfiprintf_r+0x1e4>
 800370a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800370e:	f04f 0901 	mov.w	r9, #1
 8003712:	4623      	mov	r3, r4
 8003714:	469a      	mov	sl, r3
 8003716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800371a:	b10a      	cbz	r2, 8003720 <_svfiprintf_r+0x60>
 800371c:	2a25      	cmp	r2, #37	@ 0x25
 800371e:	d1f9      	bne.n	8003714 <_svfiprintf_r+0x54>
 8003720:	ebba 0b04 	subs.w	fp, sl, r4
 8003724:	d00b      	beq.n	800373e <_svfiprintf_r+0x7e>
 8003726:	465b      	mov	r3, fp
 8003728:	4622      	mov	r2, r4
 800372a:	4629      	mov	r1, r5
 800372c:	4638      	mov	r0, r7
 800372e:	f7ff ff6b 	bl	8003608 <__ssputs_r>
 8003732:	3001      	adds	r0, #1
 8003734:	f000 80a7 	beq.w	8003886 <_svfiprintf_r+0x1c6>
 8003738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800373a:	445a      	add	r2, fp
 800373c:	9209      	str	r2, [sp, #36]	@ 0x24
 800373e:	f89a 3000 	ldrb.w	r3, [sl]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 809f 	beq.w	8003886 <_svfiprintf_r+0x1c6>
 8003748:	2300      	movs	r3, #0
 800374a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800374e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003752:	f10a 0a01 	add.w	sl, sl, #1
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	9307      	str	r3, [sp, #28]
 800375a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800375e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003760:	4654      	mov	r4, sl
 8003762:	2205      	movs	r2, #5
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	484e      	ldr	r0, [pc, #312]	@ (80038a4 <_svfiprintf_r+0x1e4>)
 800376a:	f7fc fd39 	bl	80001e0 <memchr>
 800376e:	9a04      	ldr	r2, [sp, #16]
 8003770:	b9d8      	cbnz	r0, 80037aa <_svfiprintf_r+0xea>
 8003772:	06d0      	lsls	r0, r2, #27
 8003774:	bf44      	itt	mi
 8003776:	2320      	movmi	r3, #32
 8003778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800377c:	0711      	lsls	r1, r2, #28
 800377e:	bf44      	itt	mi
 8003780:	232b      	movmi	r3, #43	@ 0x2b
 8003782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003786:	f89a 3000 	ldrb.w	r3, [sl]
 800378a:	2b2a      	cmp	r3, #42	@ 0x2a
 800378c:	d015      	beq.n	80037ba <_svfiprintf_r+0xfa>
 800378e:	9a07      	ldr	r2, [sp, #28]
 8003790:	4654      	mov	r4, sl
 8003792:	2000      	movs	r0, #0
 8003794:	f04f 0c0a 	mov.w	ip, #10
 8003798:	4621      	mov	r1, r4
 800379a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800379e:	3b30      	subs	r3, #48	@ 0x30
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	d94b      	bls.n	800383c <_svfiprintf_r+0x17c>
 80037a4:	b1b0      	cbz	r0, 80037d4 <_svfiprintf_r+0x114>
 80037a6:	9207      	str	r2, [sp, #28]
 80037a8:	e014      	b.n	80037d4 <_svfiprintf_r+0x114>
 80037aa:	eba0 0308 	sub.w	r3, r0, r8
 80037ae:	fa09 f303 	lsl.w	r3, r9, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	46a2      	mov	sl, r4
 80037b8:	e7d2      	b.n	8003760 <_svfiprintf_r+0xa0>
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	1d19      	adds	r1, r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	9103      	str	r1, [sp, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfbb      	ittet	lt
 80037c6:	425b      	neglt	r3, r3
 80037c8:	f042 0202 	orrlt.w	r2, r2, #2
 80037cc:	9307      	strge	r3, [sp, #28]
 80037ce:	9307      	strlt	r3, [sp, #28]
 80037d0:	bfb8      	it	lt
 80037d2:	9204      	strlt	r2, [sp, #16]
 80037d4:	7823      	ldrb	r3, [r4, #0]
 80037d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80037d8:	d10a      	bne.n	80037f0 <_svfiprintf_r+0x130>
 80037da:	7863      	ldrb	r3, [r4, #1]
 80037dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80037de:	d132      	bne.n	8003846 <_svfiprintf_r+0x186>
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	9203      	str	r2, [sp, #12]
 80037e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037ec:	3402      	adds	r4, #2
 80037ee:	9305      	str	r3, [sp, #20]
 80037f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038b4 <_svfiprintf_r+0x1f4>
 80037f4:	7821      	ldrb	r1, [r4, #0]
 80037f6:	2203      	movs	r2, #3
 80037f8:	4650      	mov	r0, sl
 80037fa:	f7fc fcf1 	bl	80001e0 <memchr>
 80037fe:	b138      	cbz	r0, 8003810 <_svfiprintf_r+0x150>
 8003800:	9b04      	ldr	r3, [sp, #16]
 8003802:	eba0 000a 	sub.w	r0, r0, sl
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	4082      	lsls	r2, r0
 800380a:	4313      	orrs	r3, r2
 800380c:	3401      	adds	r4, #1
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003814:	4824      	ldr	r0, [pc, #144]	@ (80038a8 <_svfiprintf_r+0x1e8>)
 8003816:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800381a:	2206      	movs	r2, #6
 800381c:	f7fc fce0 	bl	80001e0 <memchr>
 8003820:	2800      	cmp	r0, #0
 8003822:	d036      	beq.n	8003892 <_svfiprintf_r+0x1d2>
 8003824:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <_svfiprintf_r+0x1ec>)
 8003826:	bb1b      	cbnz	r3, 8003870 <_svfiprintf_r+0x1b0>
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3307      	adds	r3, #7
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003836:	4433      	add	r3, r6
 8003838:	9309      	str	r3, [sp, #36]	@ 0x24
 800383a:	e76a      	b.n	8003712 <_svfiprintf_r+0x52>
 800383c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003840:	460c      	mov	r4, r1
 8003842:	2001      	movs	r0, #1
 8003844:	e7a8      	b.n	8003798 <_svfiprintf_r+0xd8>
 8003846:	2300      	movs	r3, #0
 8003848:	3401      	adds	r4, #1
 800384a:	9305      	str	r3, [sp, #20]
 800384c:	4619      	mov	r1, r3
 800384e:	f04f 0c0a 	mov.w	ip, #10
 8003852:	4620      	mov	r0, r4
 8003854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003858:	3a30      	subs	r2, #48	@ 0x30
 800385a:	2a09      	cmp	r2, #9
 800385c:	d903      	bls.n	8003866 <_svfiprintf_r+0x1a6>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c6      	beq.n	80037f0 <_svfiprintf_r+0x130>
 8003862:	9105      	str	r1, [sp, #20]
 8003864:	e7c4      	b.n	80037f0 <_svfiprintf_r+0x130>
 8003866:	fb0c 2101 	mla	r1, ip, r1, r2
 800386a:	4604      	mov	r4, r0
 800386c:	2301      	movs	r3, #1
 800386e:	e7f0      	b.n	8003852 <_svfiprintf_r+0x192>
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	462a      	mov	r2, r5
 8003876:	4b0e      	ldr	r3, [pc, #56]	@ (80038b0 <_svfiprintf_r+0x1f0>)
 8003878:	a904      	add	r1, sp, #16
 800387a:	4638      	mov	r0, r7
 800387c:	f3af 8000 	nop.w
 8003880:	1c42      	adds	r2, r0, #1
 8003882:	4606      	mov	r6, r0
 8003884:	d1d6      	bne.n	8003834 <_svfiprintf_r+0x174>
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	065b      	lsls	r3, r3, #25
 800388a:	f53f af2d 	bmi.w	80036e8 <_svfiprintf_r+0x28>
 800388e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003890:	e72c      	b.n	80036ec <_svfiprintf_r+0x2c>
 8003892:	ab03      	add	r3, sp, #12
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	462a      	mov	r2, r5
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <_svfiprintf_r+0x1f0>)
 800389a:	a904      	add	r1, sp, #16
 800389c:	4638      	mov	r0, r7
 800389e:	f000 f879 	bl	8003994 <_printf_i>
 80038a2:	e7ed      	b.n	8003880 <_svfiprintf_r+0x1c0>
 80038a4:	08003d7c 	.word	0x08003d7c
 80038a8:	08003d86 	.word	0x08003d86
 80038ac:	00000000 	.word	0x00000000
 80038b0:	08003609 	.word	0x08003609
 80038b4:	08003d82 	.word	0x08003d82

080038b8 <_printf_common>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	4616      	mov	r6, r2
 80038be:	4698      	mov	r8, r3
 80038c0:	688a      	ldr	r2, [r1, #8]
 80038c2:	690b      	ldr	r3, [r1, #16]
 80038c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bfb8      	it	lt
 80038cc:	4613      	movlt	r3, r2
 80038ce:	6033      	str	r3, [r6, #0]
 80038d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038d4:	4607      	mov	r7, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	b10a      	cbz	r2, 80038de <_printf_common+0x26>
 80038da:	3301      	adds	r3, #1
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	0699      	lsls	r1, r3, #26
 80038e2:	bf42      	ittt	mi
 80038e4:	6833      	ldrmi	r3, [r6, #0]
 80038e6:	3302      	addmi	r3, #2
 80038e8:	6033      	strmi	r3, [r6, #0]
 80038ea:	6825      	ldr	r5, [r4, #0]
 80038ec:	f015 0506 	ands.w	r5, r5, #6
 80038f0:	d106      	bne.n	8003900 <_printf_common+0x48>
 80038f2:	f104 0a19 	add.w	sl, r4, #25
 80038f6:	68e3      	ldr	r3, [r4, #12]
 80038f8:	6832      	ldr	r2, [r6, #0]
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	42ab      	cmp	r3, r5
 80038fe:	dc26      	bgt.n	800394e <_printf_common+0x96>
 8003900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	3b00      	subs	r3, #0
 8003908:	bf18      	it	ne
 800390a:	2301      	movne	r3, #1
 800390c:	0692      	lsls	r2, r2, #26
 800390e:	d42b      	bmi.n	8003968 <_printf_common+0xb0>
 8003910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003914:	4641      	mov	r1, r8
 8003916:	4638      	mov	r0, r7
 8003918:	47c8      	blx	r9
 800391a:	3001      	adds	r0, #1
 800391c:	d01e      	beq.n	800395c <_printf_common+0xa4>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	f003 0306 	and.w	r3, r3, #6
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf02      	ittt	eq
 800392a:	68e5      	ldreq	r5, [r4, #12]
 800392c:	6833      	ldreq	r3, [r6, #0]
 800392e:	1aed      	subeq	r5, r5, r3
 8003930:	68a3      	ldr	r3, [r4, #8]
 8003932:	bf0c      	ite	eq
 8003934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003938:	2500      	movne	r5, #0
 800393a:	4293      	cmp	r3, r2
 800393c:	bfc4      	itt	gt
 800393e:	1a9b      	subgt	r3, r3, r2
 8003940:	18ed      	addgt	r5, r5, r3
 8003942:	2600      	movs	r6, #0
 8003944:	341a      	adds	r4, #26
 8003946:	42b5      	cmp	r5, r6
 8003948:	d11a      	bne.n	8003980 <_printf_common+0xc8>
 800394a:	2000      	movs	r0, #0
 800394c:	e008      	b.n	8003960 <_printf_common+0xa8>
 800394e:	2301      	movs	r3, #1
 8003950:	4652      	mov	r2, sl
 8003952:	4641      	mov	r1, r8
 8003954:	4638      	mov	r0, r7
 8003956:	47c8      	blx	r9
 8003958:	3001      	adds	r0, #1
 800395a:	d103      	bne.n	8003964 <_printf_common+0xac>
 800395c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003964:	3501      	adds	r5, #1
 8003966:	e7c6      	b.n	80038f6 <_printf_common+0x3e>
 8003968:	18e1      	adds	r1, r4, r3
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	2030      	movs	r0, #48	@ 0x30
 800396e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003972:	4422      	add	r2, r4
 8003974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800397c:	3302      	adds	r3, #2
 800397e:	e7c7      	b.n	8003910 <_printf_common+0x58>
 8003980:	2301      	movs	r3, #1
 8003982:	4622      	mov	r2, r4
 8003984:	4641      	mov	r1, r8
 8003986:	4638      	mov	r0, r7
 8003988:	47c8      	blx	r9
 800398a:	3001      	adds	r0, #1
 800398c:	d0e6      	beq.n	800395c <_printf_common+0xa4>
 800398e:	3601      	adds	r6, #1
 8003990:	e7d9      	b.n	8003946 <_printf_common+0x8e>
	...

08003994 <_printf_i>:
 8003994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	7e0f      	ldrb	r7, [r1, #24]
 800399a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800399c:	2f78      	cmp	r7, #120	@ 0x78
 800399e:	4691      	mov	r9, r2
 80039a0:	4680      	mov	r8, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	469a      	mov	sl, r3
 80039a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039aa:	d807      	bhi.n	80039bc <_printf_i+0x28>
 80039ac:	2f62      	cmp	r7, #98	@ 0x62
 80039ae:	d80a      	bhi.n	80039c6 <_printf_i+0x32>
 80039b0:	2f00      	cmp	r7, #0
 80039b2:	f000 80d1 	beq.w	8003b58 <_printf_i+0x1c4>
 80039b6:	2f58      	cmp	r7, #88	@ 0x58
 80039b8:	f000 80b8 	beq.w	8003b2c <_printf_i+0x198>
 80039bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039c4:	e03a      	b.n	8003a3c <_printf_i+0xa8>
 80039c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039ca:	2b15      	cmp	r3, #21
 80039cc:	d8f6      	bhi.n	80039bc <_printf_i+0x28>
 80039ce:	a101      	add	r1, pc, #4	@ (adr r1, 80039d4 <_printf_i+0x40>)
 80039d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d4:	08003a2d 	.word	0x08003a2d
 80039d8:	08003a41 	.word	0x08003a41
 80039dc:	080039bd 	.word	0x080039bd
 80039e0:	080039bd 	.word	0x080039bd
 80039e4:	080039bd 	.word	0x080039bd
 80039e8:	080039bd 	.word	0x080039bd
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	080039bd 	.word	0x080039bd
 80039f4:	080039bd 	.word	0x080039bd
 80039f8:	080039bd 	.word	0x080039bd
 80039fc:	080039bd 	.word	0x080039bd
 8003a00:	08003b3f 	.word	0x08003b3f
 8003a04:	08003a6b 	.word	0x08003a6b
 8003a08:	08003af9 	.word	0x08003af9
 8003a0c:	080039bd 	.word	0x080039bd
 8003a10:	080039bd 	.word	0x080039bd
 8003a14:	08003b61 	.word	0x08003b61
 8003a18:	080039bd 	.word	0x080039bd
 8003a1c:	08003a6b 	.word	0x08003a6b
 8003a20:	080039bd 	.word	0x080039bd
 8003a24:	080039bd 	.word	0x080039bd
 8003a28:	08003b01 	.word	0x08003b01
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6032      	str	r2, [r6, #0]
 8003a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e09c      	b.n	8003b7a <_printf_i+0x1e6>
 8003a40:	6833      	ldr	r3, [r6, #0]
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	1d19      	adds	r1, r3, #4
 8003a46:	6031      	str	r1, [r6, #0]
 8003a48:	0606      	lsls	r6, r0, #24
 8003a4a:	d501      	bpl.n	8003a50 <_printf_i+0xbc>
 8003a4c:	681d      	ldr	r5, [r3, #0]
 8003a4e:	e003      	b.n	8003a58 <_printf_i+0xc4>
 8003a50:	0645      	lsls	r5, r0, #25
 8003a52:	d5fb      	bpl.n	8003a4c <_printf_i+0xb8>
 8003a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	da03      	bge.n	8003a64 <_printf_i+0xd0>
 8003a5c:	232d      	movs	r3, #45	@ 0x2d
 8003a5e:	426d      	negs	r5, r5
 8003a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a64:	4858      	ldr	r0, [pc, #352]	@ (8003bc8 <_printf_i+0x234>)
 8003a66:	230a      	movs	r3, #10
 8003a68:	e011      	b.n	8003a8e <_printf_i+0xfa>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	0608      	lsls	r0, r1, #24
 8003a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a74:	d402      	bmi.n	8003a7c <_printf_i+0xe8>
 8003a76:	0649      	lsls	r1, r1, #25
 8003a78:	bf48      	it	mi
 8003a7a:	b2ad      	uxthmi	r5, r5
 8003a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a7e:	4852      	ldr	r0, [pc, #328]	@ (8003bc8 <_printf_i+0x234>)
 8003a80:	6033      	str	r3, [r6, #0]
 8003a82:	bf14      	ite	ne
 8003a84:	230a      	movne	r3, #10
 8003a86:	2308      	moveq	r3, #8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a8e:	6866      	ldr	r6, [r4, #4]
 8003a90:	60a6      	str	r6, [r4, #8]
 8003a92:	2e00      	cmp	r6, #0
 8003a94:	db05      	blt.n	8003aa2 <_printf_i+0x10e>
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	432e      	orrs	r6, r5
 8003a9a:	f021 0104 	bic.w	r1, r1, #4
 8003a9e:	6021      	str	r1, [r4, #0]
 8003aa0:	d04b      	beq.n	8003b3a <_printf_i+0x1a6>
 8003aa2:	4616      	mov	r6, r2
 8003aa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003aa8:	fb03 5711 	mls	r7, r3, r1, r5
 8003aac:	5dc7      	ldrb	r7, [r0, r7]
 8003aae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ab2:	462f      	mov	r7, r5
 8003ab4:	42bb      	cmp	r3, r7
 8003ab6:	460d      	mov	r5, r1
 8003ab8:	d9f4      	bls.n	8003aa4 <_printf_i+0x110>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10b      	bne.n	8003ad6 <_printf_i+0x142>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	07df      	lsls	r7, r3, #31
 8003ac2:	d508      	bpl.n	8003ad6 <_printf_i+0x142>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	6861      	ldr	r1, [r4, #4]
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	bfde      	ittt	le
 8003acc:	2330      	movle	r3, #48	@ 0x30
 8003ace:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ad2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ad6:	1b92      	subs	r2, r2, r6
 8003ad8:	6122      	str	r2, [r4, #16]
 8003ada:	f8cd a000 	str.w	sl, [sp]
 8003ade:	464b      	mov	r3, r9
 8003ae0:	aa03      	add	r2, sp, #12
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	f7ff fee7 	bl	80038b8 <_printf_common>
 8003aea:	3001      	adds	r0, #1
 8003aec:	d14a      	bne.n	8003b84 <_printf_i+0x1f0>
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af2:	b004      	add	sp, #16
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	4832      	ldr	r0, [pc, #200]	@ (8003bcc <_printf_i+0x238>)
 8003b02:	2778      	movs	r7, #120	@ 0x78
 8003b04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	6831      	ldr	r1, [r6, #0]
 8003b0c:	061f      	lsls	r7, r3, #24
 8003b0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b12:	d402      	bmi.n	8003b1a <_printf_i+0x186>
 8003b14:	065f      	lsls	r7, r3, #25
 8003b16:	bf48      	it	mi
 8003b18:	b2ad      	uxthmi	r5, r5
 8003b1a:	6031      	str	r1, [r6, #0]
 8003b1c:	07d9      	lsls	r1, r3, #31
 8003b1e:	bf44      	itt	mi
 8003b20:	f043 0320 	orrmi.w	r3, r3, #32
 8003b24:	6023      	strmi	r3, [r4, #0]
 8003b26:	b11d      	cbz	r5, 8003b30 <_printf_i+0x19c>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e7ad      	b.n	8003a88 <_printf_i+0xf4>
 8003b2c:	4826      	ldr	r0, [pc, #152]	@ (8003bc8 <_printf_i+0x234>)
 8003b2e:	e7e9      	b.n	8003b04 <_printf_i+0x170>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	e7f6      	b.n	8003b28 <_printf_i+0x194>
 8003b3a:	4616      	mov	r6, r2
 8003b3c:	e7bd      	b.n	8003aba <_printf_i+0x126>
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	6961      	ldr	r1, [r4, #20]
 8003b44:	1d18      	adds	r0, r3, #4
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	062e      	lsls	r6, r5, #24
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	d501      	bpl.n	8003b52 <_printf_i+0x1be>
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	e002      	b.n	8003b58 <_printf_i+0x1c4>
 8003b52:	0668      	lsls	r0, r5, #25
 8003b54:	d5fb      	bpl.n	8003b4e <_printf_i+0x1ba>
 8003b56:	8019      	strh	r1, [r3, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	e7bc      	b.n	8003ada <_printf_i+0x146>
 8003b60:	6833      	ldr	r3, [r6, #0]
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	6032      	str	r2, [r6, #0]
 8003b66:	681e      	ldr	r6, [r3, #0]
 8003b68:	6862      	ldr	r2, [r4, #4]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f7fc fb37 	bl	80001e0 <memchr>
 8003b72:	b108      	cbz	r0, 8003b78 <_printf_i+0x1e4>
 8003b74:	1b80      	subs	r0, r0, r6
 8003b76:	6060      	str	r0, [r4, #4]
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b82:	e7aa      	b.n	8003ada <_printf_i+0x146>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	4632      	mov	r2, r6
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	47d0      	blx	sl
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0ad      	beq.n	8003aee <_printf_i+0x15a>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	079b      	lsls	r3, r3, #30
 8003b96:	d413      	bmi.n	8003bc0 <_printf_i+0x22c>
 8003b98:	68e0      	ldr	r0, [r4, #12]
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	4298      	cmp	r0, r3
 8003b9e:	bfb8      	it	lt
 8003ba0:	4618      	movlt	r0, r3
 8003ba2:	e7a6      	b.n	8003af2 <_printf_i+0x15e>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4640      	mov	r0, r8
 8003bac:	47d0      	blx	sl
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d09d      	beq.n	8003aee <_printf_i+0x15a>
 8003bb2:	3501      	adds	r5, #1
 8003bb4:	68e3      	ldr	r3, [r4, #12]
 8003bb6:	9903      	ldr	r1, [sp, #12]
 8003bb8:	1a5b      	subs	r3, r3, r1
 8003bba:	42ab      	cmp	r3, r5
 8003bbc:	dcf2      	bgt.n	8003ba4 <_printf_i+0x210>
 8003bbe:	e7eb      	b.n	8003b98 <_printf_i+0x204>
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	f104 0619 	add.w	r6, r4, #25
 8003bc6:	e7f5      	b.n	8003bb4 <_printf_i+0x220>
 8003bc8:	08003d8d 	.word	0x08003d8d
 8003bcc:	08003d9e 	.word	0x08003d9e

08003bd0 <memmove>:
 8003bd0:	4288      	cmp	r0, r1
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	eb01 0402 	add.w	r4, r1, r2
 8003bd8:	d902      	bls.n	8003be0 <memmove+0x10>
 8003bda:	4284      	cmp	r4, r0
 8003bdc:	4623      	mov	r3, r4
 8003bde:	d807      	bhi.n	8003bf0 <memmove+0x20>
 8003be0:	1e43      	subs	r3, r0, #1
 8003be2:	42a1      	cmp	r1, r4
 8003be4:	d008      	beq.n	8003bf8 <memmove+0x28>
 8003be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bee:	e7f8      	b.n	8003be2 <memmove+0x12>
 8003bf0:	4402      	add	r2, r0
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	d100      	bne.n	8003bfa <memmove+0x2a>
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c02:	e7f7      	b.n	8003bf4 <memmove+0x24>

08003c04 <_sbrk_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d06      	ldr	r5, [pc, #24]	@ (8003c20 <_sbrk_r+0x1c>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7fd fb36 	bl	8001280 <_sbrk>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_sbrk_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_sbrk_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000254 	.word	0x20000254

08003c24 <memcpy>:
 8003c24:	440a      	add	r2, r1
 8003c26:	4291      	cmp	r1, r2
 8003c28:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003c2c:	d100      	bne.n	8003c30 <memcpy+0xc>
 8003c2e:	4770      	bx	lr
 8003c30:	b510      	push	{r4, lr}
 8003c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c3a:	4291      	cmp	r1, r2
 8003c3c:	d1f9      	bne.n	8003c32 <memcpy+0xe>
 8003c3e:	bd10      	pop	{r4, pc}

08003c40 <_realloc_r>:
 8003c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c44:	4607      	mov	r7, r0
 8003c46:	4614      	mov	r4, r2
 8003c48:	460d      	mov	r5, r1
 8003c4a:	b921      	cbnz	r1, 8003c56 <_realloc_r+0x16>
 8003c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c50:	4611      	mov	r1, r2
 8003c52:	f7ff bc4d 	b.w	80034f0 <_malloc_r>
 8003c56:	b92a      	cbnz	r2, 8003c64 <_realloc_r+0x24>
 8003c58:	f7ff fbde 	bl	8003418 <_free_r>
 8003c5c:	4625      	mov	r5, r4
 8003c5e:	4628      	mov	r0, r5
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c64:	f000 f81a 	bl	8003c9c <_malloc_usable_size_r>
 8003c68:	4284      	cmp	r4, r0
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	d802      	bhi.n	8003c74 <_realloc_r+0x34>
 8003c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c72:	d8f4      	bhi.n	8003c5e <_realloc_r+0x1e>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4638      	mov	r0, r7
 8003c78:	f7ff fc3a 	bl	80034f0 <_malloc_r>
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	b908      	cbnz	r0, 8003c84 <_realloc_r+0x44>
 8003c80:	4645      	mov	r5, r8
 8003c82:	e7ec      	b.n	8003c5e <_realloc_r+0x1e>
 8003c84:	42b4      	cmp	r4, r6
 8003c86:	4622      	mov	r2, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	bf28      	it	cs
 8003c8c:	4632      	movcs	r2, r6
 8003c8e:	f7ff ffc9 	bl	8003c24 <memcpy>
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff fbbf 	bl	8003418 <_free_r>
 8003c9a:	e7f1      	b.n	8003c80 <_realloc_r+0x40>

08003c9c <_malloc_usable_size_r>:
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f18      	subs	r0, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfbc      	itt	lt
 8003ca6:	580b      	ldrlt	r3, [r1, r0]
 8003ca8:	18c0      	addlt	r0, r0, r3
 8003caa:	4770      	bx	lr

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
